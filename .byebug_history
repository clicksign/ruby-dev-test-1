continue
upload.id
continue
valid_upload_params
continue
valid_upload_params
continue
upload.id
upload
continue
V1::UploadManager::CreateUploadService.new(valid_upload_params).call
valid_upload_params
continue
Folder.all
Upload.all
Upload.al
Folder.includes(:uploads).where.not(uploads: {id: nil}).to_sql
Folder.includes(:uploads).where.not(uploads: {id: nil})
Folder.includes(:uploads).where.not(uploads: {id: nil}).first
folder_with_uploads
folder_with_uploads.id
continue
acceptable_header
folder_with_uploads
continue
folder_with_uploads
let(:folder_with_uploads) {Folder.includes(:uploads).where.not(uploads: {id: nil}).first}
continue
folder_with_uploads
continue
folder_with_uploads
continue
folder
continue
acceptable_header
continue
valid_update_folder_params
valid_update_folder_params[:data][:id] = "3"
valid_update_folder_params[:data]
valid_update_folder_params
continue
existing_folder
continue
request.accept = 'application/vnd.api+json'
folder
continue
response_body.fetch('data').fetch('id')
response_body.fetch('data')
response_body
response_body.keys[0][0]
response_body.keys[0]
response_body.keys[:data]
response_body.keys['data']
response_body.keys
response_body
continue
folder_search_params
continue
folder_search_params
continue
params.require(:q)
params.permit(:q)
folder_search_params
continue
folder_search_params
continue
folder_query_params
continue
params.require(:q).permit(:name_i_cont)
params.require(:q).permit
params.require(:q)
params.require
params
params.require.permit(:q)
params[:q]
ActiveModelSerializers::Deserialization.jsonapi_parse(params[:q])
params.require(:q)
params[:q]
folder_query_params
continue
@upload[:file]
continue
@params[:file]
continue
@str
continue
@params[:file]
continue
@params
@params[:file]
continue
upload.file.blob
continue
upload.file.blob
upload.file.name
upload.file
continue
upload.file.attached?
upload.persisted?
upload.file.url
upload.file
upload
continue
folder = Folder.includes(:sub_folders).where.not(sub_folders: {id: nil}).first
folder = Folder.includes(:sub_folders).where.not(sub_folders: {id: nil})
Folder.last
folder
folder.sub_folders.destroy_all if folder.sub_folders
continue
folder.sub_folders.try(:destroy_all)
folder.sub_folders.destroy_all
folder
continue
folder.sub_folders.count > 0
older.sub_folders.count > 0
folder.sub_folders
3.times do |i|
      folder.sub_folders.create(name: Faker::Alphanumeric.alphanumeric(number: 10, min_alpha: 3))
    end 
folder = Folder.last
folder = Foldar.last
folder = Folder.create(name: folder_name)
ActiveRecord::Base.connection.current_database
Rails.env
Rails.env?
Rails.configuration.database_configuration
Folder.last.persisted?
Folder.count
Folder.all
Folder.create(name: folder_name)
folder_name
continue
params[:folder_id]
continue
params
upload_params
continue
&block
block
continue
@params
continue
@params
continue
@params
continue
@params
@upload
@params
@upload.update_attributes(@params)
@upload.update(@params)
@upload.id
@upload
continue
Upload.find(args[0].id).update(params)
Upload.find(args[0].id)
Upload.find(args[0].id
args[0].id
args[0]
args[:id]
args["id"]
args["id]
args.id
args
Upload.find(args["id"))
Upload.find(args[:id))
Upload.find(args[:id)
params
args
continue
@upload
upload
params
continue
params
args
continue
id = params[:id].presence || params[:upload_id]
params[:id]
params
continue
e.mecon
e.message.count
e.message
e.lenght
e.count
e.inspect
continue
errors
continue
errors
continue
e.message
e.messages
e
continue
errors.inspect
errors
continue
self.class.name
self.class
self
continue
@upload[:file]
signature_decoded
@upload[:folder_id]
@upload
@upload.folder_id
continue@upload.folder_id
continue
@upload
continue
@upload
continue
Upload.create(@upload)
@upload
continue
self.folder_id.present? || self.file.present?
self.folder_id.present?
self.file.present?
continue
para
args
continue
@folder
continue
@folder
continue
@folder
continue
@folder
continue
Folder.find(id)
id
continue
@folder.errors
@folder
c@folder
continue
@folder.update(@params) 
continue@folder.update(@params) 
@folder.update(params)
continue
@folder
args
continue
conticont
args
id
continue
Folder.update(@folder)
@folder
continue
@folder
continue
@folder
