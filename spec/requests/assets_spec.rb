require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/assets", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Asset. As you add validations to Asset, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {name: 'attach', file: @file, node_id: Node.create!(name: "Root").id}
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  before :each do
    @file = fixture_file_upload('test_lic.xml', 'text/xml')
  end


  describe "GET /show" do
    it "renders a successful response" do
      node = Node.create!({name: "test"})
      asset = Asset.create! valid_attributes
      get asset_url(asset), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    it "creates a new Asset" do
      post nodes_url, params: { name: 'root node' }, as: :json
      parsed_root_body = JSON.parse(response.body)

      post assets_url, params: valid_attributes, as: :json     
      expect(response).to have_http_status(:created)
    end    
  end

  describe "DELETE /destroy" do
    it "destroys the requested asset" do
      asset = Asset.create! valid_attributes
      expect {
        delete asset_url(asset), as: :json
      }.to change(Asset, :count).by(-1)
    end
  end
end
